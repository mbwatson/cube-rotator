{"version":3,"sources":["components/controls.js","components/cube.js","components/word.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","ButtonGroup","div","Wrapper","ControlPanel","children","Cube","animated","Face","props","color","transform","Word","word","math","Scene","App","useState","rotationX","setRotationX","rotationY","setRotationY","rotationZ","setRotationZ","setWord","animation","useSpring","config","mass","tension","friction","handleRotateX","value","event","newChar","handleRotateY","handleRotateZ","onClick","style","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.619d3ecc.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nexport const Button = styled.button`\ndisplay: block;\n    background-color: coral;\n    cursor: pointer;\n    padding: 0.5rem;\n    font-style: italic;\n    margin: 0;\n    font-weight: bold;\n    color: #000;\n    border: 1px solid #00000033;\n    transition: filter 250ms;\n    &:hover {\n        filter: brightness(0.95);\n    }\n`\n\nexport const ButtonGroup = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0 0.5rem;\n    & ${ Button } {\n        height: 100%;\n        width: 100%;\n    }\n`\n\nconst Wrapper = styled.div`\n    // background-color: #33333333;\n    display: flex;\n    justify-content: center;\n    align-items: stretch;\n    padding: 1rem;\n`\n\nexport const ControlPanel = ({ children }) => {\n    return (\n        <Wrapper>\n            { children }      \n        </Wrapper>\n    )\n}","import styled from 'styled-components'\nimport { animated } from 'react-spring'\n\nexport const Cube = styled(animated.div)`\n    height: 100%;\n    width: 100%;\n    position: relative;\n    transform-style: preserve-3d;\n`\n\nexport const Face = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    background-color: ${ props => props.color ? props.color : 'coral' };\n    border: 2px solid #333;\n    opacity: 0.75;\n    transform-origin: 50% 50%;\n    transform: translateZ(100px) ${ props => props.transform || 'none' };\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    color: #333;\n    font-weight: bold;\n    font-size: 32pt;\n`\n\n","import React from 'react'\nimport styled from 'styled-components'\nimport MathJax from 'react-mathjax-preview'\n\nconst Wrapper = styled.div`\n    position: fixed;\n    bottom: 0;\n    padding: 1rem;\n    width: 100%;\n    background-color: #111;\n    display: flex;\n    justify-content: center;\n    align-items: stretch;\n    padding: 1rem;\n    min-height: 4rem;\n    font-family: serif;\n    font-size: 120%;\n    font-style: italic;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nexport const Word = ({ word }) => {\n\n    return (\n        <Wrapper>\n            <MathJax math={ '$$w = ' + word + '$$' } />\n        </Wrapper>\n    )\n}","import React, { Fragment, useState } from 'react'\nimport styled from 'styled-components'\nimport { useSpring } from 'react-spring'\nimport { ControlPanel, ButtonGroup, Button } from './components/controls'\nimport { Cube, Face } from './components/cube'\nimport { Word } from './components/word'\n\nconst LENGTH = '300px'\n\nconst Scene = styled.div`\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    height: ${ LENGTH };\n    width: ${ LENGTH };\n    border: 1px solid #555;\n    perspective: 1000px;\n`\n\nconst App = () => {\n    const [rotationX, setRotationX] = useState(0)\n    const [rotationY, setRotationY] = useState(0)\n    const [rotationZ, setRotationZ] = useState(0)\n    const [word, setWord] = useState('')\n\n    const animation = useSpring({\n        transform: `\n            translateZ(calc(-${ LENGTH } / 2))\n            rotateX(${ rotationX }deg)\n            rotateY(${ rotationY }deg)\n            rotateZ(${ rotationZ }deg)\n        `,\n        config: { mass: 1, tension: 200, friction: 20, },\n    })\n    \n    const handleRotateX = value => event => {\n        setRotationX(rotationX => rotationX + value * 90)\n        const newChar = value === 1 ? 'x' : 'x^-'\n        setWord(word => word + newChar)\n    }\n\n    const handleRotateY = value => event => {\n        setRotationY(rotationY => rotationY + value * 90)\n        const newChar = value === 1 ? 'y' : 'y^-'\n        setWord(word => word + newChar)\n    }\n\n    const handleRotateZ = value => event => {\n        setRotationZ(rotationZ => rotationZ + value * 90)\n        const newChar = value === 1 ? 'z' : 'z^-'\n        setWord(word => word + newChar)\n    }\n\n    const handleResetRotation = () => {\n        setRotationX(0)\n        setRotationY(0)\n        setRotationZ(0)\n        setWord('')\n    }\n\n    return (\n        <Fragment>\n            <ControlPanel>\n                <ButtonGroup>\n                    <Button onClick={ handleRotateX(1) }>x</Button>\n                    <Button onClick={ handleRotateX(-1) }>x^-</Button>\n                </ButtonGroup>\n                <ButtonGroup>\n                    <Button onClick={ handleRotateY(1) }>y</Button>\n                    <Button onClick={ handleRotateY(-1) }>y^-</Button>\n                </ButtonGroup>\n                <ButtonGroup>\n                    <Button onClick={ handleRotateZ(1) }>z</Button>\n                    <Button onClick={ handleRotateZ(-1) }>z^-</Button>\n                </ButtonGroup>\n                <ButtonGroup>\n                    <Button onClick={ handleResetRotation }>RESET</Button>\n                </ButtonGroup>\n            </ControlPanel>\n            <Scene>\n                <Cube style={ animation }>\n                    <Face color=\"white\" style={{ transform: `rotateY(0deg) translateZ(calc(${ LENGTH } / 2))` }}>FRONT</Face>\n                    <Face color=\"peachpuff\" style={{ transform: `rotateY(-90deg) translateZ(calc(${ LENGTH } / 2))` }}>RIGHT</Face>\n                    <Face color=\"coral\" style={{ transform: `rotateY(90deg) translateZ(calc(${ LENGTH } / 2))` }}>LEFT</Face>\n                    <Face color=\"darkcyan\" style={{ transform: `rotateY(180deg) translateZ(calc(${ LENGTH } / 2))` }}>BACK</Face>\n                    <Face color=\"powderblue\" style={{ transform: `rotateX(90deg) translateZ(calc(${ LENGTH } / 2))` }}>TOP</Face>\n                    <Face color=\"olive\" style={{ transform: `rotateX(-90deg) translateZ(calc(${ LENGTH } / 2))` }}>BOTTOM</Face>\n                </Cube>\n            </Scene>\n            <Word word={ word } />\n        </Fragment>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}